#
# Aliases
#
alias me='echo $(ifconfig eth0 | grep "inet " | cut -b 9- | cut  -d" " -f2)'
alias rf="rm -frd"
alias e4l="enum4linux -a"
alias h2t="html2text -style pretty"
alias oso=onesixtyone
alias cme=crackmapexec
#
# Functions
#
timestamp() {echo $(date +%Y%m%d-%T)}
did() {echo -e "[---] $(timestamp)\n[${2:-log}] ${1}\n" >> ~/did.txt}
htm() {curl -s $1 | html2text -style pretty}
SCAN_DIRECTORY=""
create_scan_directory() {
    NAME=${1:-.scans}
    mkdir -p $HOME/$NAME
    SCAN_DIRECTORY=$HOME/$NAME
}
sort_ips() {
    IPS=$1
    sort -t . -k 3,3n -k 4,4n $IPS
}
get_hosts() {
    PORT=${1:-"none"}
    NETWORK=${2:-"10.11.1.0"}
    PATTERN="Nmap scan report for ${NETWORK:0:-1}"
    get_ip() {
        cut -d" " -f5 $1
    }
    if [[ $PORT == "none" ]]; then
        nmap $NETWORK/24 -sn | grep $PATTERN | get_ip
    else
        nmap $NETWORK/24 -p $PORT --open | grep $PATTERN | get_ip
    fi
}
get_hostnames() {
    DNS=$1
    NETWORK=${2:-"10.11.1.0"}
    PATTERN="Nmap scan report for "
    get_ip() {
        cut -d" " -f5- $1
    }
    if [[ ${#1} -gt 0 ]]; then
        nmap $NETWORK/24 --dns-server $DNS -sn | grep $PATTERN | get_ip
    else
        echo "DNS server address required"
    fi
}
get_gateway() {
   INTERFACE=${1:-tap0}
   ip route | grep via | grep $INTERFACE | cut -d" " -f3 
}
scan_tcp() {
    INTERFACE=${2:-"tap0"}
    create_scan_directory
    run() {
        IP=$1
        masscan $IP -e $INTERFACE --router-ip $(get_gateway $INTERFACE) -p 0-65535 -oL $SAVE_LOCATION/$IP
    }
    run $1
}
scan_udp() {
    INTERFACE=${2:-"tap0"}
    SAVE_LOCATION=$HOME/.scans
    mkdir -p $SAVE_LOCATION
    run() {
        IP=$1
        masscan $IP -e $INTERFACE --router-ip $(get_gateway $INTERFACE) --udp-ports 0-65535 -oL $SAVE_LOCATION/$IP-UDP
    }
    run $1
}
nmap_tcp_all() {
    IP=$1
    nmap -p 1-65535 -v -T4 --reason $IP
}
enum_snmp() {
    STRINGS="/usr/share/seclists/Discovery/SNMP/snmp-onesixtyone.txt"
    WORDLIST=${2:-STRINGS}
    NETWORK=${3:-"10.11.1.0"}
    HOSTS=$(mktemp --suffix "-$0-hosts-$(date +%Y%m%d)")
    get_hosts "none" $NETWORK > $HOSTS
    onesixtyone -i $HOSTS -c $STRINGS
}
enum_web() {
    IP=$1
    PORT=${2:-80}
    # /usr/share/seclists/Discovery/Web_Content/Top1000-RobotsDisallowed.txt
    WORDLIST=${3:-"/usr/share/seclists/Discovery/Web-Content/common.txt"}
    create_scan_directory
    touch $SCAN_DIRECTORY/$IP-gobuster.txt
    touch $SCAN_DIRECTORY/$IP-nikto.txt
    whatweb $IP
    gobuster -w $WORDLIST -u $IP:$PORT -o $SCAN_DIRECTORY/$IP-gobuster.txt
    nikto -host $IP -port $PORT -output $SCAN_DIRECTORY/$IP-nikto.txt
}
serve() {
    PORT=${1:-80}
    DIR=${2:-$(pwd)}
    echo "Serving files from $DIR"
    if type python3 >/dev/null 2>&1; then
       python3 -m http.server $PORT 
    else
       python -m SimpleHTTPServer $PORT 
    fi
}
ssh_status() {
    ps aux | grep sshd
    netstat -plant | grep :22
}
monitor_traffic() {
    IP=$1
    iptables -I INPUT 1 -s $IP -j ACCEPT
    iptables -I OUTPUT 1 -d $IP -j ACCEPT
    iptables -Z 
}
flush_iptables() {
    echo ""
    echo ">>> Before flush <<<"
    echo "" 
    iptables -L
    iptables -F
    iptables -X
    iptables -t nat -F
    iptables -t nat -X
    iptables -t mangle -F
    iptables -t mangle -X
    iptables -t raw -F
    iptables -t raw -X
    iptables -P INPUT ACCEPT
    iptables -P FORWARD ACCEPT
    iptables -P OUTPUT ACCEPT
    echo ""
    echo ""
    echo ">>> After flush <<<"
    echo "" 
    iptables -L
    echo ""
}
iter() {
    if [[ -f "$2" ]]; then
        while read line; do
            $1 $line
        done < $2
    else
        while read ITEM; do
            $1 $ITEM
        done
    fi
}
